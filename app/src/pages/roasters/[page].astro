---

export const prerender = true;

import type { GetStaticPaths } from "astro";

// Define a type for the roaster
interface Roaster {
  Name: string;
  Website: string;
  State: string;
  hasCafe: boolean;
  multiRoaster: boolean;
}

// Define Page type
interface Page<T> {
  data: T[];
  start: number;
  end: number;
  size: number;
  total: number;
  currentPage: number;
  lastPage: number; // Adjusting to lastPage based on error
  url: {
    current: string;
    next: string | null;
    prev: string | null;
  };
}

// Use dynamic imports to load JSON files
export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  const roasters = await import("../../data/coffee-roasters.json").then(
    (module) => module.default as Roaster[]
  );
  const roastersMulti = await import(
    "../../data/coffee-roasters-multi.json"
  ).then((module) => module.default as Roaster[]);

  const combinedRoasters = [...roasters, ...roastersMulti];

  console.log("Total Roasters:", combinedRoasters.length); // Debug: Check total items

  const paginatedData = paginate(combinedRoasters, { pageSize: 12 });
  console.log("Paginated Data:", paginatedData); // Debug: Check paginated data structure

  return paginatedData;
};

type Props = {
  page: Page<Roaster>;
};

const { page } = Astro.props as Props;
console.log("Page Data:", page); // Debug: Check page data
const urlBase = "/roasters"; // Adjust this to your route
const previousPage =
  page.currentPage > 1 ? `${urlBase}/${page.currentPage - 1}` : null;
const nextPage =
  page.currentPage < page.lastPage
    ? `${urlBase}/${page.currentPage + 1}`
    : null;
console.log("Previous Page URL:", previousPage); // Debug: Check previous page URL
console.log("Next Page URL:", nextPage); // Debug: Check next page URL
---

<h1>Page {page.currentPage}</h1>
<ul>
  {page.data.map((roaster) => <li>{roaster.Name}</li>)}
</ul>
<div class="pagination-container">
  {previousPage && <a href={previousPage}>Previous</a>}
  {nextPage && <a href={nextPage}>Next</a>}
</div>