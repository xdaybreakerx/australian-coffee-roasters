---
export const prerender = true; 

import { getRoaster, getRoasterFilter} from "../../../utils/utils.js"

// Define the interface for the Roaster data
interface Roaster {
  Name: string;
  Website: string;
  State: string;
  hasCafe: boolean;
  multiRoaster: boolean;
}

interface PaginatedPage {
  data: Roaster[];
  currentPage: number;
  lastPage: number;
}

export async function getStaticPaths({ paginate }) {
  // Get the entire collection
  const roasters = await getRoaster("roasters");

  // Filter and paginate as needed
  const filteredRoasters = getRoasterFilter(roasters, {
    multiRoaster: true,
  });

  // Paginate the filtered collection
  const pages = paginate(filteredRoasters, { pageSize: 12 });

  return pages;
}

// Explicitly define the `page` variable
const page = Astro.props.page as PaginatedPage;
---

<ul>
  {
    page.data.map((roaster) => (
      <li>
        <a href={roaster.Website} target="_blank" rel="noopener noreferrer">
          {roaster.Name}
        </a>
      </li>
    ))
  }
</ul>

<nav>
  {
    page.currentPage > 1 && (
      <a
        href={Astro.url.pathname.replace(/\/\d+$/, `/${page.currentPage - 1}`)}
      >
        Previous
      </a>
    )
  }
  {
    page.currentPage < page.lastPage && (
      <a
        href={Astro.url.pathname.replace(/\/\d+$/, `/${page.currentPage + 1}`)}
      >
        Next
      </a>
    )
  }
</nav>
