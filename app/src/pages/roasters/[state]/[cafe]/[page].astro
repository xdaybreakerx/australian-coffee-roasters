---
export const prerender = true;

import { getRoaster, getRoasterFilter } from "../../../../utils/utils.js";

import Layout from "../../../../layouts/Layout.astro";

import FilterDrawer from "../../../../components/FilterDrawer.astro";
import RoasterCard from "../../../../components/RoasterCard.astro";
import Pagination from "../../../../components/Pagination.astro";

// Define the interface for the Roaster data
interface Roaster {
  Name: string;
  Website: string;
  State: string;
  hasCafe: boolean;
  multiRoaster: boolean;
}

interface PaginatedPage {
  data: Roaster[];
  currentPage: number;
  lastPage: number;
}

export async function getStaticPaths({ paginate }) {
  const states = ["NSW", "VIC", "QLD", "WA", "SA", "TAS", "ACT", "NT"];
  const hasCafeOptions = [true, false]; // Options for cafe filter

  const routes = [];

  for (const state of states) {
    for (const hasCafe of hasCafeOptions) {
      const roasters = await getRoaster("roasters");

      let filteredRoasters;
      if (hasCafe) {
        filteredRoasters = getRoasterFilter(roasters, {
          state: state,
          hasCafe: true,
        });
      } else {
        filteredRoasters = getRoasterFilter(roasters, {
          state: state,
        });
      }

      // Skip creating a route if there are no roasters matching the filter
      if (filteredRoasters.length === 0) {
        continue;
      }

      const pages = paginate(filteredRoasters, {
        pageSize: 12,
        params: { state, cafe: String(hasCafe) },
      });

      routes.push(...pages);
    }
  }

  return routes;
}

const page = Astro.props.page as PaginatedPage;
const { state, cafe } = Astro.params;
const hasCafe = cafe === "true";

const prevUrl = Astro.url.pathname.replace(
  /\/\d+$/,
  `/${page.currentPage - 1}`
);
const nextUrl = Astro.url.pathname.replace(
  /\/\d+$/,
  `/${page.currentPage + 1}`
);
---

<Layout title="Australian Coffee Roasters">
  <!-- Dynamic Page Heading -->
  <div class="text-right p-4 sm:text-left w-full sm:w-auto">
    <h1 class="text-3xl font-bold">You're currently viewing:</h1>
    <h2 class="text-xl font-bold">
      {
        hasCafe
          ? `Roasters in ${state} with a Cafe`
          : `All Roasters in ${state}`
      }
    </h2>
  </div>

  <FilterDrawer>
    <div slot="main-content" id="wrapper">
      <!-- Cafe setting quick toggle -->
      <div class="flex justify-center md:justify-end w-full p-4">
        <a href={`/roasters/${state}/${!hasCafe}/1`} class="btn btn-accent">
          {
            hasCafe
              ? "Show Roasters without a Cafe"
              : "Show Roasters with a Cafe"
          }
        </a>
      </div>

      <!-- Display Roasters -->
      {
        page.data.length === 0 ? (
          <p>No roasters found for the selected filters.</p>
        ) : (
          <section id="list-of-roasters">
            <div class="flex flex-wrap sm:flex-col md:flex-row gap-4 justify-center">
              {page.data.map((roaster) => (
                <RoasterCard roaster={roaster} />
              ))}
            </div>
          </section>
        )
      }

      <!-- Pagination Control -->
      {
        page.lastPage > 1 && (
          <Pagination
            currentPage={page.currentPage}
            lastPage={page.lastPage}
            prevUrl={prevUrl}
            nextUrl={nextUrl}
          />
        )
      }
    </div>
  </FilterDrawer>
</Layout>
